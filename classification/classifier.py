# Diccionario que mapea categor칤as tem치ticas a una lista de palabras clave asociadas.
CATEGORIES = {
    "pol칤tica": [
        "congreso", "presidente", "elecciones", "gobierno",
        "ministro", "pol칤tica", "estado", "partido pol칤tico"
    ],
    "econom칤a": [
        "inflaci칩n", "banco", "mercado", "d칩lar", "exportaci칩n",
        "econom칤a", "sunat", "ingresos", "impuestos"
    ],
    "deportes": [
        "f칰tbol", "liga", "gol", "partido", "selecci칩n",
        "campeonato", "deportes", "jugador", "club"
    ],
    "tecnolog칤a": [
        "inteligencia artificial", "google", "app", "software",
        "startup", "tecnolog칤a", "innovaci칩n", "smartphone", "internet"
    ],
    "mundo": [
        "eeuu", "ucrania", "china", "internacional", "conflicto",
        "guerra", "rusia", "mundo", "israel", "otan"
    ],
    "sociedad": [
        "ciudadanos", "protesta", "salud", "educaci칩n", "crimen",
        "accidente", "sociedad", "familia", "ni침os", "hospital"
    ]
}


def classify_article(article_text):
    """
    Clasifica un art칤culo en una o m치s categor칤as basadas en la aparici칩n de keywords.
    
    Args:
        article_text (str): Texto del art칤culo (puede ser t칤tulo, resumen, etc.).
        
    Returns:
        list: Lista de categor칤as detectadas, o ['sin categor칤a'] si no se encontr칩 coincidencia.
    """
    # Convierte todo el texto a min칰sculas para hacer la b칰squeda insensible a may칰sculas
    text = article_text.lower()
    assigned_categories = []

    # Recorre todas las categor칤as y verifica si alguna palabra clave aparece en el texto
    for category, keywords in CATEGORIES.items():
        if any(keyword in text for keyword in keywords):
            assigned_categories.append(category)

    # Devuelve al menos una categor칤a (por defecto "sin categor칤a" si no hay coincidencias)
    return assigned_categories or ["sin categor칤a"]


def classify_articles(articles):
    """
    Clasifica una lista de art칤culos, agregando las categor칤as detectadas a cada uno.
    
    Args:
        articles (list): Lista de objetos art칤culo con atributos `title` y `summary`.
    
    Returns:
        list: Misma lista de art칤culos, ahora con un nuevo atributo `categories`.
    """
    for article in articles:
        # Une t칤tulo y resumen para tener m치s contexto en la clasificaci칩n
        combined_text = f"{article.title} {article.summary}"
        
        # Aplica clasificaci칩n por palabras clave
        categories = classify_article(combined_text)
        
        # Agrega las categor칤as detectadas al objeto art칤culo
        article.categories = categories
        
        # Imprime log para debug
        print(f"游늷 Categor칤as para '{article.title}': {categories}")
    
    return articles
